// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id
  username     String     @unique
  displayName  String
  email        String?    @unique
  passwordHash String?
  googleId     String?    @unique
  avatarUrl    String?
  bio          String?
  sessions     Session[]
  createdAt    DateTime   @default(now())
  Post         Post[]
  followers    Follow[]   @relation("Following") // Users that the user follows - Following 
  following    Follow[]   @relation("Followers") // Users that follows the user - Followers
  likes        Like[]
  bookmarks    Bookmark[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade means if you delete a user the corresponding session data also will be deleted

  @@map("sesisons")
}

model Post {
  id          String     @id @default(cuid())
  content     String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  likes       Like[]
  bookmarks   Bookmark[]

  @@map("posts")
}

model Media {
  id        String     @id @default(cuid())
  url       String
  type      MEDIA_TYPE
  postId    String?
  // onDelete is set to SetNull because, if a post is deleted we dont want to deleted the corresponding media since we will have to later
  // delete the media files that are uploaded to uploadThing so we will require the fileName for accessing and deleting those
  // instead when a post is deleted we set the postId to null so that we can actually figure out what media files must be deleted later, by just
  // figuring out the media that doesnt have a postId
  post      Post?      @relation(fields: [postId], references: [id], onDelete: SetNull)
  createdAt DateTime   @default(now())

  @@map("post_media")
}

// ******************************************************************************************************************************
// * For better understanding refer this doc:  https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations *
// ******************************************************************************************************************************

// We create a Follow model inorder to figure out a users followers and following list, we could actually keep a list inside the User model inorder to identify the followers and following
// But as the number of users grow it becomes really hard to fetch the data for our needs from the last table. So we actually create a new model Follow where we will be having a:
// Many to Many relationship between User and Follow tables which connects users to users
model Follow {
  followerId String // The ID of the user who is following someone, ie. if we click on the follow button we become the follower so this will have our id

  // SCENARIO: WHEN USERA FOLLOWS USERB 
  // See this field in the UserB's perspective, UserA's id will be listed in the Followers list of UserB
  // ----------------------------------------------------------------------------------------------------
  // followerId represents the follower, so in UserB's perspective, 
  // UserA will be listed as a follower. Therefore, the relation from User to Follow where the user is the 
  // follower is named 'Following' (because you're following someone, you're in their following list).
  // ----------------------------------------------------------------------------------------------------
  follower User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String // The ID of the user who is getting followed, ie. the userId of the user we follow

  // See this field in the UserA's perspective, UserB's id will be listed in the Following list of UserA
  // ----------------------------------------------------------------------------------------------------
  // followingId represents the user being followed, so in UserA's perspective, 
  // UserB will appear in UserA's following list. 
  // The relation where the user is being followed is named 'Followers' (because you're the one being followed).
  // ----------------------------------------------------------------------------------------------------
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  // This is set to uniquely identify the records from follow table
  @@unique([followerId, followingId])
  @@map("follows")
}

// For example: When UserA clicks the follow button on UserB =>
// When UserA follows UserB, a new record will be created in the Follow table that associates UserA (the follower) with UserB (the user being followed).
// Here’s the record in the Follow table:

// followerId	 | followingId |
// --------------------------|
// UserA's ID	 | UserB's ID  |
// --------------------------

// Like model that includes the likes details of each post
model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

// Bookmark model that includes all the posts that are bookmarked
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

// The Users table remains unaffected directly by the follow action itself, but if you fetch a user’s following or followers, the new relationships will be visible:
enum MEDIA_TYPE {
  IMAGE
  VIDEO
}
